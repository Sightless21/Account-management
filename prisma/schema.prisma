generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Employee {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  email          String        @unique
  phoneNumber    String
  hashedPassword String
  role           Role          @default(EMPLOYEE)
  dateOfBirth    DateTime?
  address        String?
  position       String?
  nationality    String?
  ethnicity      String?
  religion       String?
  militaryStatus String?
  maritalStatus  String?
  dwelling       String?
  Leave          Leave[]       @relation(name: "EmpNeedLeave")
  Expenses       Expense[]     @relation(name: "EmpNeedExpenses")
  RoomBooking    RoomBooking[] @relation(name: "EmpRoombooking")
  CarBooking     CarBooking[]  @relation(name: "EmpCarbooking")
  assignedTasks  KanbanTask[]  @relation(name: "EmpAssignedTasks")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  clientId       String?       @db.ObjectId
  Client         Client[]      @relation(name: "oneEmptoOneClient")
}

enum Role {
  ADMIN
  HR
  EMPLOYEE
}

model Application {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  person          Person            @relation(fields: [personId], references: [id])
  personId        String            @db.ObjectId
  birthdate       DateTime
  info            Info              @relation(fields: [infoId], references: [id])
  infoId          String            @db.ObjectId
  itemsMilitary   String[]
  itemsMarital    String[]
  itemsDwelling   String[]
  documents       Document[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Person {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  phone          String
  email          String @unique
  position       String
  expectSalary   String

  Application Application[]
}

model Info {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
address       Address? @relation(fields: [addressid], references: [id])
addressid     String? @db.ObjectId
nationality   String
  religion      String
  race          String

  Application Application[]
}

model Address {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  houseNumber  String
  village      String
  road         String
  subDistrict  String
  district     String
  province     String
  zipCode      String
  country      String

  Info Info[]
}

model Document {
  id             String       @id @default(uuid()) @map("_id")
  name           String
  applicant      Application? @relation(fields: [applicantId], references: [id])
  applicantId    String?      @db.ObjectId
}

model KanbanTask {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  projectName String
  taskName    String
  description String
  status      TaskStatus @default(TODO)
  priority    Priority   @default(LOW)
  author      Employee?  @relation(fields: [authorId], references: [id], name: "EmpAssignedTasks")
  authorId    String     @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum TaskStatus {
  TODO
  DOING
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model Leave {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  user      Employee    @relation(fields: [userId], references: [id], name: "EmpNeedLeave")
  userId    String      @db.ObjectId
  startDate DateTime
  endDate   DateTime
  reason    String
  status    LeaveStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model RoomBooking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      Employee @relation(fields: [userId], references: [id], name: "EmpRoombooking")
  userId    String   @db.ObjectId
  room      String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarBooking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      Employee @relation(fields: [userId], references: [id], name: "EmpCarbooking")
  userId    String   @db.ObjectId
  car       String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// เบิกค่าใช้จ่าย
model Expense {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  user        Employee      @relation(fields: [userId], references: [id], name: "EmpNeedExpenses")
  userId      String        @db.ObjectId
  amount      Float
  description String
  status      ExpenseStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
}

model Client {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  hashedPassword String
  email          String    @unique
  phone          String
  employee       Employee? @relation(fields: [employeeId], references: [id],name: "oneEmptoOneClient")
  employeeId     String?   @db.ObjectId
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}
