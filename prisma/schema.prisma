generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String        @unique
  hashedPassword String?
  image          String?
  role           Role          @default(EMPLOYEE)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Leave          Leave[]
  Expenses       Expense[]
  RoomBooking    RoomBooking[]
  CarBooking     CarBooking[]
  assignedTasks  KanbanTask[]  @relation(name: "UserAssignedTasks")
}

enum Role {
  ADMIN
  HR
  EMPLOYEE
}

model Permission {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  role      Role
  feature   String
  canAccess Boolean
}

model JobApplication {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  resume    String
  status    ApplicationStatus @default(NEW)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

enum ApplicationStatus {
  NEW
  PENDING
  APPROVED
}

model KanbanTask {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  status       TaskStatus @default(TODO)
  assignedTo   User?      @relation(fields: [assignedToId], references: [id], name: "UserAssignedTasks")
  assignedToId String?    @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Leave {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @db.ObjectId
  startDate DateTime
  endDate   DateTime
  reason    String
  status    LeaveStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model RoomBooking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  room      String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarBooking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  car       String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @db.ObjectId
  amount      Float
  description String
  status      ExpenseStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
}

model Client {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  phone     String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
