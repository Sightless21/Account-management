generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// üìå Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Client + Employee ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô)
model User {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  profileImage         String?
  profilePublicImageId String?
  firstName            String
  lastName             String
  email                String    @unique
  hashedPassword       String
  phone                String
  role                 Role      @default(EMPLOYEE)
  isVerify             Boolean   @default(false)
  employee             Employee? @relation("UserEmployee")
  employeeId           String?   @db.ObjectId
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

// üìå Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
model Applicant {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  person                Person
  birthdate             DateTime
  info                  Info
  military              String
  marital               String
  dwelling              String
  documents             Document[]
  status                ApplicantStatus
  convertedToEmployeeAt DateTime? // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡πÇ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô Employee ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
}

// üìå Model ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (1:1 ‡∏Å‡∏±‡∏ö User)
model Employee {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  person    Person?
  birthdate DateTime
  info      Info?
  military  String
  marital   String
  dwelling  String
  documents Document[] @relation("EmployeeDocuments")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String     @unique @db.ObjectId
  user      User?      @relation(fields: [userId], references: [id], name: "UserEmployee")
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  projectName String   @unique
  description String?  @default("")
  task        Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  taskName    String
  description String
  dueDate     DateTime?
  assignee    String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(LOW)
  Project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String?    @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum TaskStatus {
  TODO
  DOING
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

// üìå ENUM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Applicant (‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£)
enum ApplicantStatus {
  NEW
  PENDING_INTERVIEW
  INTERVIEW_PASSED
  SUCCESS
}

// üìå ENUM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Role (RBAC)
enum Role {
  ADMIN
  HR
  INTERVIEWER
  MANAGER
  EMPLOYEE
}

// üìå ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
type Person {
  name         String
  phone        String
  email        String
  position     String
  expectSalary String
}

// üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
type Info {
  address     Address
  nationality String
  religion    String
  race        String
}

// üìå ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
type Address {
  houseNumber String
  village     String
  road        String
  subDistrict String
  district    String
  province    String
  zipCode     String
  country     String
}

// üìå ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
model Document {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  applicantId String?    @db.ObjectId
  employeeId  String?    @db.ObjectId // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Employee
  applicant   Applicant? @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  employee    Employee?  @relation(fields: [employeeId], references: [id], onDelete: Cascade, name: "EmployeeDocuments") // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° relation ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
}

// üìå ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á 
model Roombooking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String
  startTime String
  endTime   String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// üìå ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤
model Dayoff {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  employeeName String
  leaveType    LeaveType
  date         DateDayoff
  status       DayoffStatus
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

type DateDayoff {
  from DateTime
  to   DateTime
}

enum DayoffStatus {
  Pending
  Accepted
  Declined
}

enum LeaveType {
  Vacation
  Sick
  Personal
  Maternity
}

model CarReservation {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  userId       String // ‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á
  employeeName String // ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
  date         DateCarReservation
  destination  String // ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô
  startTime    String // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "09:00"
  endTime      String // ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ‡πÄ‡∏ä‡πà‡∏ô "11:00"
  tripStatus   TripStatus // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
  carId        String             @db.ObjectId
  car          Car                @relation(fields: [carId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

type DateCarReservation {
  from DateTime
  to   DateTime
}

model Car {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  name         String // ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ
  plate        String           @unique // ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
  type         CarType // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ
  reservations CarReservation[]
}

enum CarType {
  SEDAN // ‡∏£‡∏ñ‡πÄ‡∏Å‡πã‡∏á
  SUV // ‡∏£‡∏ñ SUV
  VAN // ‡∏£‡∏ñ‡∏ï‡∏π‡πâ
}

enum CarAvailability {
  AVAILABLE
  IN_USE
  MAINTENANCE
}

enum TripStatus {
  ONGOING // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
  COMPLETED // ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
  CANCELLED // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
}

model ExpenseClaim {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  employeeName       String
  title              String
  transactionDate    DateTime
  description        String
  status             ExpenseClaimStatus
  attachmentUrl      String? // URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå
  attachmentPublicId String? // ‡πÄ‡∏Å‡πá‡∏ö Public ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Cloudinary
  useForeignCurrency Boolean            @default(false)
  country            String? // ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
  expenses           Json? // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

enum ExpenseClaimStatus {
  Pending
  Accepted
  Declined
}

model Customer {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  companyName   String
  contactPerson String
  position      String
  address       String
  phoneNumber   String
  taxId         String
  email         String
  website       String?
  industry      String?
  notes         String?
}
