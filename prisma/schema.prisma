generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// üìå Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
model Applicant {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  person        Person // ‚úÖ ‡∏ù‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (Object)
  birthdate     DateTime // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
  info          Info // ‚úÖ ‡∏ù‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
  itemsMilitary String // ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏ß‡∏∞‡∏ó‡∏´‡∏≤‡∏£ (Array ‡∏Ç‡∏≠‡∏á String)
  itemsMarital  String // ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏™‡∏°‡∏£‡∏™
  itemsDwelling String // ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢
  documents     Document[] // ‚úÖ ‡πÅ‡∏ó‡∏ô `itemsDoc`
  status        ApplicantStatus 
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

// üìå Model ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£)
model Employee {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  email          String        @unique
  phoneNumber    String
  hashedPassword String
  role           Role          @default(EMPLOYEE)
  dateOfBirth    DateTime?
  address        String?
  position       String?
  nationality    String?
  ethnicity      String?
  religion       String?
  militaryStatus String?
  maritalStatus  String?
  dwelling       String?
  Leave          Leave[]       @relation(name: "EmpNeedLeave")
  Expenses       Expense[]     @relation(name: "EmpNeedExpenses")
  RoomBooking    RoomBooking[] @relation(name: "EmpRoombooking")
  CarBooking     CarBooking[]  @relation(name: "EmpCarbooking")
  assignedTasks  KanbanTask[]  @relation(name: "EmpAssignedTasks")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  clientId       String?       @db.ObjectId
  Client         Client[]      @relation(name: "oneEmptoOneClient")
}

enum Role {
  ADMIN
  HR
  EMPLOYEE
}

// üìå Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Client
model Client {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  hashedPassword String
  email          String    @unique
  phone          String
  employee       Employee? @relation(fields: [employeeId], references: [id], name: "oneEmptoOneClient")
  employeeId     String?   @db.ObjectId
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// üìå ENUM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Applicant (‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£)
enum ApplicantStatus {
  NEW // ‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà
  PENDING_INTERVIEW // ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå
  INTERVIEW_PASSED // ‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏ú‡πà‡∏≤‡∏ô
}

// üìå ENUM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏á‡∏≤‡∏ô
enum ProbationStatus {
  PENDING // ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
  PASSED // ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏á‡∏≤‡∏ô
  FAILED // ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏á‡∏≤‡∏ô
}

// üìå ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
type Person {
  name         String
  phone        String
  email        String
  position     String
  expectSalary String
}

// üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
type Info {
  address     Address
  nationality String
  religion    String
  race        String
}

// üìå ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
type Address {
  houseNumber String
  village     String
  road        String
  subDistrict String
  district    String
  province    String
  zipCode     String
  country     String
}

// üìå ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
model Document {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  applicant   Applicant? @relation(fields: [applicantId], references: [id])
  applicantId String?    @db.ObjectId
}

// KabanTask
model KanbanTask {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  projectName String
  taskName    String
  description String
  status      TaskStatus @default(TODO)
  priority    Priority   @default(LOW)
  author      Employee?  @relation(fields: [authorId], references: [id], name: "EmpAssignedTasks")
  authorId    String     @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum TaskStatus {
  TODO
  DOING
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

// end Kabantask

model Leave {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  user      Employee    @relation(fields: [userId], references: [id], name: "EmpNeedLeave")
  userId    String      @db.ObjectId
  startDate DateTime
  endDate   DateTime
  reason    String
  status    LeaveStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model RoomBooking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      Employee @relation(fields: [userId], references: [id], name: "EmpRoombooking")
  userId    String   @db.ObjectId
  room      String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarBooking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      Employee @relation(fields: [userId], references: [id], name: "EmpCarbooking")
  userId    String   @db.ObjectId
  car       String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ‡πÄ‡∏ö‡∏¥‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
model Expense {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  user        Employee      @relation(fields: [userId], references: [id], name: "EmpNeedExpenses")
  userId      String        @db.ObjectId
  amount      Float
  description String
  status      ExpenseStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
}
