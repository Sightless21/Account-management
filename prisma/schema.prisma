generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// üìå Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Client + Employee ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô)
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  email          String    @unique
  hashedPassword String
  phone          String
  role           Role      @default(EMPLOYEE)
  isVerify       Boolean   @default(false)
  employee       Employee? @relation("UserEmployee")
  employeeId     String?   @db.ObjectId
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// üìå Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
model Applicant {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  person                Person
  birthdate             DateTime
  info                  Info
  itemsMilitary         String
  itemsMarital          String
  itemsDwelling         String
  documents             Document[]
  status                ApplicantStatus
  convertedToEmployeeAt DateTime? // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡πÇ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô Employee ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
}

// üìå Model ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (1:1 ‡∏Å‡∏±‡∏ö User)
model Employee {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  person    Person?
  birthdate DateTime
  info      Info?
  documents Document[] @relation("EmployeeDocuments")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String     @unique @db.ObjectId
  user      User?      @relation(fields: [userId], references: [id], name: "UserEmployee")
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  projectName String   @unique
  task        Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  taskName    String
  description String
  status      TaskStatus @default(todo)
  priority    Priority   @default(LOW)
  Project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String?    @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum TaskStatus {
  todo
  doing
  done
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

// üìå ENUM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Applicant (‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£)
enum ApplicantStatus {
  NEW
  PENDING_INTERVIEW
  INTERVIEW_PASSED
}

// üìå ENUM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Role (RBAC)
enum Role {
  ADMIN
  HR
  INTERVIEWER
  MANAGER
  EMPLOYEE
}

// üìå ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
type Person {
  name         String
  phone        String
  email        String
  position     String
  expectSalary String
}

// üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
type Info {
  address     Address
  nationality String
  religion    String
  race        String
}

// üìå ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
type Address {
  houseNumber String
  village     String
  road        String
  subDistrict String
  district    String
  province    String
  zipCode     String
  country     String
}

// üìå ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
model Document {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  applicantId String?    @db.ObjectId
  employeeId  String?    @db.ObjectId // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Employee
  applicant   Applicant? @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  employee    Employee?  @relation(fields: [employeeId], references: [id], onDelete: Cascade, name: "EmployeeDocuments") // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° relation ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
}
