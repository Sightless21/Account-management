generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Employee {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  email          String        @unique
  phoneNumber    String
  hashedPassword String
  role           Role          @default(EMPLOYEE)
  dateOfBirth    DateTime?
  address        String?
  position       String?
  nationality    String?
  ethnicity      String?
  religion       String?
  militaryStatus String?
  maritalStatus  String?
  dwelling       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Leave          Leave[]
  Expenses       Expense[]
  RoomBooking    RoomBooking[]
  CarBooking     CarBooking[]
  assignedTasks  KanbanTask[]  @relation(name: "UserAssignedTasks")
}

enum Role {
  ADMIN
  HR
  EMPLOYEE
}

model Applicantion {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String
  dateOfBirth     DateTime
  address         String?
  position        String
  expectSalary    Int
  nationality     String
  ethnicity       String
  religion        String
  militaryStatus  String
  maritalStatus   String
  dwelling        String
  probationStatus Boolean
  status          ApplicationStatus @default(NEW)
  ducuments       Document[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Document {
  id             String        @id @default(uuid()) @map("_id")
  name           String //nameDocuents
  applicant      Applicantion? @relation(fields: [applicantionId], references: [id])
  applicantionId String?       @db.ObjectId
}

enum ApplicationStatus {
  NEW
  PENDING
  APPROVED
}

model KanbanTask {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  projectName  String
  taskName     String
  description  String
  status       TaskStatus @default(TODO)
  priority     Priority   @default(LOW)
  assignedTo   Employee?  @relation(fields: [assignedToId], references: [id], name: "UserAssignedTasks")
  assignedToId String?    @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum TaskStatus {
  TODO
  DOING
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model Leave {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  user      Employee    @relation(fields: [userId], references: [id])
  userId    String      @db.ObjectId
  startDate DateTime
  endDate   DateTime
  reason    String
  status    LeaveStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model RoomBooking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      Employee @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  room      String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarBooking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      Employee @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  car       String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// เบิกค่าใช้จ่าย
model Expense {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  user        Employee      @relation(fields: [userId], references: [id])
  userId      String        @db.ObjectId
  amount      Float
  description String
  status      ExpenseStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
}

model Client {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  hashedPassword String
  email          String   @unique
  phone          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
